/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kitreturn;

import java.io.File;    
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;

/**
 *
 * @author irene
 */
public class kitReturn extends javax.swing.JFrame {

    /**
     * Creates new form kitReturn
     */
    public kitReturn() {
        initComponents();
        
        this.jPanel1 = ei;
        this.setContentPane(this.jPanel1);
        this.setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
        this.setVisible(true);
        this.setTitle("Kit Return");
        this.setSize(2500, 2000);
        this.setLocation(200, 0);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jCheckBoxMenuItem3 = new javax.swing.JCheckBoxMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 770, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 440, Short.MAX_VALUE)
        );

        jMenu1.setText("File");

        jCheckBoxMenuItem3.setSelected(true);
        jCheckBoxMenuItem3.setText("Open File");
        jCheckBoxMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jCheckBoxMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("Help");
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jCheckBoxMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
        // TODO add your handling code here:
        JFrame helpJFrame = new JFrame("Help");
        JLabel helpLabel = new JLabel(this.helpText);
        helpJFrame.add(helpLabel);
        helpJFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        helpJFrame.setSize(600, 400);
        helpJFrame.setLocation(0, 0);
        helpJFrame.setVisible(true);
    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

    private void jCheckBoxMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem3ActionPerformed
        // TODO add your handling code here:
        try {
            JFileChooser fileChooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
            fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
            int result = fileChooser.showOpenDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                String filename = selectedFile.getName();
                String extension = filename.substring(filename.lastIndexOf(".") + 1, filename.length());
                String txt = "txt";
                JOptionPane optionPane = new JOptionPane();

            while ((extension.compareTo(txt)) != 0) {
                 optionPane.showMessageDialog(null, "Choose a txt file!");
                fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
                result = fileChooser.showOpenDialog(this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    selectedFile = fileChooser.getSelectedFile();
                } else {
                    extension = "txt";
                }
            }
                System.out.println("Selected file: " + selectedFile.getAbsolutePath());
                Scanner scanner;

                scanner = new Scanner(selectedFile);

                String line = null;
                while (scanner.hasNextLine()) {
                    line = scanner.nextLine().trim();
                    file.add(line);
                }
                System.out.println(file);
                for (int i = 0; i < file.size(); i++) {
                    if (file.get(i).equalsIgnoreCase("FileName ArrayList:")) {
                        while ((file.get(i + 1).compareTo("FilePath ArrayList:")) != 0) {
                            i = i + 1;
                            FileName.add(file.get(i));
                            System.out.println(" inside line filaname " + file.get(i));

                        }
                    } else if (file.get(i).equalsIgnoreCase("FilePath ArrayList:")) {
                        while ((file.get(i + 1).compareTo("Selected Combo Boxes:")) != 0) {
                            i = i + 1;
                            FilePath.add(file.get(i));
                            System.out.println("inside line filepath" + file.get(i));
                        }
                    } else if (file.get(i).equalsIgnoreCase("Selected Combo Boxes:")) {
                        while ((file.get(i + 1).contains("Number of up/down buttons that should be disabled:")) == false) {
                            i = i + 1;
                            SelectedComboBoxes.add(file.get(i));
                            System.out.println("inside line combo" + file.get(i));
                        }
                    } else if ((file.get(i).contains("Number of up/down buttons that should be disabled:"))) {
                        String[] space = file.get(i).split("Number of up/down buttons that should be disabled:");
                        disableUpDown = space[1];
                        System.out.println("inside disableUpDown " + disableUpDown);

                    } else if (file.get(i).equalsIgnoreCase("View files created:")) {
                        while ((file.get(i + 1).compareTo("Complete Buttons Pressed:")) != 0) {
                            i = i + 1;
                            ViewFiles.add(file.get(i));
                            System.out.println("inside line view" + file.get(i));
                        }
                    } else if ((file.get(i).equalsIgnoreCase("Complete Buttons Pressed:"))) {
                        while (i + 1 < file.size()) {
                            i = i + 1;
                            completeButtonsPressed.add(file.get(i));
                            System.out.println("inside line complete" + file.get(i));
                        }
                    }
                }
                System.out.println("FileName " + FileName);
                System.out.println("FilePath " + FilePath);
                System.out.println("SelectedComboBoxes " + SelectedComboBoxes);
                System.out.println("disableUpDown " + disableUpDown);
                System.out.println("ViewFiles " + ViewFiles);
                System.out.println("completeButtonsPressed " + completeButtonsPressed);
                
                ei.readFile(FileName, FilePath, SelectedComboBoxes, disableUpDown, ViewFiles, completeButtonsPressed);

            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(kitReturn.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jCheckBoxMenuItem3ActionPerformed

    public void readTest(String testFileName) {
        ObjectInputStream ois = null;
        FileInputStream fis = null;
        try {
            fis = new FileInputStream(new File(testFileName));
            ois = new ObjectInputStream(fis);
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Error Reading Test", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(kitReturn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(kitReturn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(kitReturn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(kitReturn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        ExcelInput i = new ExcelInput();
        if (i.getFinish() == true) {
            ///////////////////////////////
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new kitReturn().setVisible(true);
            }
        });
    }
    ExcelInput ei = new ExcelInput();
    ArrayList<String> FileName = new ArrayList<>();
    ArrayList<String> FilePath = new ArrayList<>();
    ArrayList<String> SelectedComboBoxes = new ArrayList<>();
    String disableUpDown = null;
    ArrayList<String> ViewFiles = new ArrayList<>();
    ArrayList<String> completeButtonsPressed = new ArrayList<>();
    ArrayList<String> file = new ArrayList<>();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
String helpText = "<HTML><h1 align=\"center\">\n"
            + "    Help\n"
            + "</h1>\n"
            + "<h2>\n"
            + "    How to function the application?\n"
            + "</h2>\n"
            + "<p>\n"
            + "    Press the “Add Excel File” button to add files to the drop boxes and add\n"
            + "    projects to the the list of existing projects. If you accidentally add the same \n"
            + "    file twice or open an non excel file, error messages will be displayed.\n"
            + "\n"
            + "</p>\n"
            + "<p1>\n"
            + "    Use the “Select Excel File” drop boxes to select the projects that will be\n"
            + "    completed in the sequence that they will be completed using the ⇧⇩buttons\n"
            + "    you swap the selected files. Once you press the complete button the project\n"
            + "    won’t be editable and you will not be able to swap with other project\n"
            + "\n"
            + "</p1>\n"
            + "<p2>\n"
            + "   If you add an excel file by accident, you can remove it by pressing the “Remove Excel File”\n"
            + "   which will display all the files added until now in form of a drop box and you can\n"
            + "   choose the file you want to remove. \n"
            + "</p2>\n"
            + "</p3>\n"
            + "   When you press the “complete” button, re-kit” as well as the name of the project\n"
            + "   that the manufacturer parts will be re-kitted will appear in the excel next to the\n"
            + "   parts. To view the excel file press view next to the project you want to view\n"
            + "   The “view” button will be enabled only when the complete button of the same project\n"
            + "   is pressed. After completing the series of projects, you have the ability to save the\n"
            + "   status of the Completed files as a file and continue another time by opening that file.\n"
            + "\n"
            + "<p3>\n"
            + "</h2>\n"
            + "</p></HTML>";

}
